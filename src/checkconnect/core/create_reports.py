# SPDX-License-Identifier: EUPL-1.2
#
# SPDX-FileCopyrightText: © 2025-present Jürgen Mülbert

import gettext
import logging
import os
from pathlib import Path
from typing import Optional, Union

from weasyprint import HTML

# Define the translation domain
TRANSLATION_DOMAIN = "checkconnect"

# Set the locales path relative to the current file
LOCALES_PATH = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'core', 'locales')

# Initialize gettext
try:
    translate = gettext.translation(
        TRANSLATION_DOMAIN,
        LOCALES_PATH,
        languages=[os.environ.get('LANG', 'en')],  # Respect the system language
    ).gettext
except FileNotFoundError:
    # Fallback to the default English translation if the locale is not found
    def translate(message):
        return message


class ReportTemplate:
    """
    A class template for generating CheckConnect reports.

    This template provides a standard HTML layout for reports generated
    by the CheckConnect application, with sections for NTP and URL results.
    """

    TEMPLATE = """<!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>{title}</title>
            <style>
                body {{
                    font-family: Arial, sans-serif;
                    margin: 20px;
                    line-height: 1.5;
                    color: #333;
                }}
                h1 {{
                    color: #2c3e50;
                    border-bottom: 2px solid #eee;
                    padding-bottom: 10px;
                }}
                h2 {{
                    color: #16a085;
                    margin-top: 25px;
                }}
                pre {{
                    background-color: #f7f7f7;
                    padding: 15px;
                    border-radius: 5px;
                    border-left: 4px solid #16a085;
                    white-space: pre-wrap;
                    font-family: monospace;
                    overflow-x: auto;
                }}
                .container {{
                    max-width: 1000px;
                    margin: 0 auto;
                }}
                .footer {{
                    margin-top: 30px;
                    padding-top: 10px;
                    border-top: 1px solid #eee;
                    font-size: 0.8em;
                    color: #777;
                    text-align: center;
                }}
                @media print {{
                    body {{
                        font-size: 11pt;
                    }}
                    pre {{
                        border-left: 2px solid #16a085;
                        padding: 10px;
                    }}
                }}
            </style>
        </head>
        <body>
            <div class="container">
                <h1>{title}</h1>
                <h2>{ntp_header}</h2>
                <pre>{ntp_content}</pre>
                <h2>{url_header}</h2>
                <pre>{url_content}</pre>
                <div class="footer">
                    Generated by CheckConnect
                </div>
            </div>
        </body>
        </html>
    """

    def __init__(self, title=None, ntp_header=None, url_header=None):
        """
        Initialize the template with customizable titles and headers.

        Args:
            title: Title of the report. Defaults to "CheckConnect Report".
            ntp_header: Header for the NTP section. Defaults to "NTP Results".
            url_header: Header for the URL section. Defaults to "URL Results".

        """
        self.title = title or translate("CheckConnect Report")
        self.ntp_header = ntp_header or translate("NTP Results")
        self.url_header = url_header or translate("URL Results")

    def render(self, ntp_content: str, url_content: str) -> str:
        """
        Renders the report template with the provided data.

        Args:
            ntp_content: The NTP results content to include in the report.
            url_content: The URL results content to include in the report.

        Returns:
            A rendered HTML string containing the complete report.

        """
        return self.TEMPLATE.format(
            title=self.title,
            ntp_header=self.ntp_header,
            url_header=self.url_header,
            ntp_content=ntp_content,
            url_content=url_content,
        )


class ReportGenerator:
    """
    Generates HTML and PDF reports from NTP and URL test results.

    This class provides functionality to create both HTML and PDF reports
    from the results of NTP server and URL connectivity tests.
    """

    HTML_FILENAME = "report.html"
    PDF_FILENAME = "report.pdf"

    def __init__(
        self,
        ntp_file: Union[str, Path],
        url_file: Union[str, Path],
        output_dir: Union[str, Path] = "reports",
        logger: Optional[logging.Logger] = None,
    ):
        """
        Initializes the ReportGenerator with the specified files and directory.

        Args:
            ntp_file: Path to the NTP results file.
            url_file: Path to the URL results file.
            output_dir: Directory to store the generated reports. Defaults to "reports".
            logger: A logger instance. If None, a default logger is created.

        """
        self.ntp_file = Path(ntp_file)
        self.url_file = Path(url_file)
        self.output_dir = Path(output_dir)
        self.logger = logger or logging.getLogger(__name__)

    def _read_file(self, file_path: Union[str, Path]) -> str:
        """
        Reads the contents of a file and returns it as a string.

        Args:
            file_path: The path to the file to read.

        Returns:
            The contents of the file as a string.

        Raises:
            FileNotFoundError: If the file does not exist.
            Exception: If there is any other error reading the file.

        """
        path = Path(file_path)
        try:
            return path.read_text()
        except FileNotFoundError as e:
            self.logger.error(translate(f"File not found: {e}"))
            raise
        except Exception as e:
            self.logger.exception(translate(f"Error reading file {file_path}: {e}"))
            raise

    def _ensure_output_directory(self) -> None:
        """
        Ensures the output directory exists, creating it if necessary.
        """
        self.output_dir.mkdir(parents=True, exist_ok=True)

    def _get_report_contents(self) -> tuple[str, str]:
        """
        Reads and returns the NTP and URL report contents.

        Returns:
            A tuple containing (ntp_content, url_content)

        Raises:
            FileNotFoundError: If either file cannot be found
            Exception: If there is an error reading either file

        """
        return self._read_file(self.ntp_file), self._read_file(self.url_file)

    def create_html_report(self) -> Path:
        """
        Generates an HTML report from NTP and URL test results.

        Returns:
            Path to the generated HTML report.

        Raises:
            Exception: If there is an error during report generation.

        """
        try:
            ntp_content, url_content = self._get_report_contents()

            # Instantiate the template and render the HTML
            report_template = ReportTemplate()
            html_content = report_template.render(ntp_content, url_content)

            # Ensure output directory exists and write the HTML content
            self._ensure_output_directory()
            output_path = self.output_dir / self.HTML_FILENAME
            output_path.write_text(html_content)

            self.logger.info(translate(f"HTML report generated at {output_path}"))
            return output_path

        except Exception as e:
            self.logger.exception(translate(f"Error generating HTML report: {e}"))
            raise

    def create_pdf_report(self) -> Path:
        """
        Generates a PDF report from NTP and URL test results using WeasyPrint.

        Returns:
            Path to the generated PDF report.

        Raises:
            Exception: If there is an error during report generation.

        """
        self.logger.info(translate(f"Creating PDF report from {self.ntp_file} and {self.url_file} in {self.output_dir}"))

        try:
            ntp_content, url_content = self._get_report_contents()

            # Instantiate the template and render the HTML
            report_template = ReportTemplate()
            html_content = report_template.render(ntp_content, url_content)

            # Ensure output directory exists
            self._ensure_output_directory()
            output_path = self.output_dir / self.PDF_FILENAME

            # Log HTML class for debugging (safely)
            try:
                self.logger.debug(f"HTML class: {HTML.__module__}.{HTML.__name__}")
            except AttributeError:
                self.logger.debug("HTML class: <mocked>")

            # Generate the PDF
            HTML(string=html_content).write_pdf(str(output_path))

            self.logger.info(translate(f"PDF report generated at {output_path}"))
            return output_path

        except Exception as e:
            self.logger.exception(translate(f"Error generating PDF report: {e}"))
            raise


def create_html_report(
    ntp_file: Union[str, Path],
    url_file: Union[str, Path],
    output_dir: Union[str, Path] = "reports",
    logger: Optional[logging.Logger] = None,
) -> None:
    """
    Generates an HTML report from NTP and URL test results.

    This is a wrapper function around ReportGenerator.create_html_report for
    backward compatibility.

    Args:
        ntp_file: Path to the NTP results file.
        url_file: Path to the URL results file.
        output_dir: Directory to store the generated reports. Defaults to "reports".
        logger: A logger instance. If None, a default logger is created.

    """
    report_generator = ReportGenerator(ntp_file, url_file, output_dir, logger)
    report_generator.create_html_report()


def create_pdf_report(
    ntp_file: Union[str, Path],
    url_file: Union[str, Path],
    output_dir: Union[str, Path] = "reports",
    logger: Optional[logging.Logger] = None,
) -> None:
    """
    Generates a PDF report from NTP and URL test results.

    This is a wrapper function around ReportGenerator.create_pdf_report for
    backward compatibility.

    Args:
        ntp_file: Path to the NTP results file.
        url_file: Path to the URL results file.
        output_dir: Directory to store the generated reports. Defaults to "reports".
        logger: A logger instance. If None, a default logger is created.

    """
    report_generator = ReportGenerator(ntp_file, url_file, output_dir, logger)
    report_generator.create_pdf_report()
