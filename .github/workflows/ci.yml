---
# SPDX-FileCopyrightText: Jürgen Mülbert
# SPDX-License-Identifier: EUPL-1.2

name: Release Pipeline
run-name: "${{ github.event_name == 'workflow_dispatch' && format('CI: {0}', github.ref_name) || '' }}"

on:
  push:
    branches: [main, develop, release]
    paths:
      - src/*
      - docs/*
      - .github/workflows/ci.yml
      - mkdocs.yml
      - pyproject.toml
  pull_request:
    types: [opened, reopened, synchronize]
  release:
    types: [published]
  workflow_dispatch:

env:
  FORCE_COLOR: '1'
  PACKAGE_NAME: checkconnect
  PYTHON_VERSION_FILE: .python-version

defaults:
  run:
    shell: bash

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate:
    name: Validate Dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: 🔒 Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit
      - name: 🧐 Checkout Repository
        uses: actions/checkout@v4 #
        with:
          fetch-depth: 0
      - name: 🔎 Dependency Review
        if: github.event_name == 'pull_request'
        uses: actions/dependency-review-action@v4

  checks:
    name: Lint, Security, Pre-Commit, Docs Checks
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: 🔒 Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit
      - name: 🧐 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Call Python Environment Setup
        uses: ./.github/actions/python-setup
        with:
          python-version: '3.x'
        id: python-setup

      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18' # Or your preferred Node.js version

      - name: 🧰 Install Dependencies
        run: |
          hatch env create lint
          hatch env create security
          hatch env create docs
          npm install # Install Node.js dependencies

      - name: ✨ Run Prettier
        run: npx prettier --write . # Format all files

      - name: 🔍 Linting
        run: hatch run lint:all

      - name: 🔐 Security Checks
        run: hatch run security:all

      - name: 🔍 Trivy Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          severity: 'CRITICAL,HIGH'

      - name: 📝 Pre-Commit Hooks
        run: hatch run lint:precommit

      - name: 📚 Documentation Checks
        run: |
          hatch run docs:build
          hatch run docs:validate-links

      - name: 📖 Spell Check for Documentation
        run: codespell --ignore-words-list="TODO,Nit" --skip="*.py,*.json,*.yaml,*.yml,*.toml,*.lock"

  test-and-build:
    name: Test & Build
    needs: [validate, checks]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    environment: production
    outputs:
      version: ${{ steps.version.outputs.version }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12', '3.13']
        environment: [staging, production]
        #exclude:  # Removed exclusion
        #  - os: ubuntu-latest
        #    python-version: '3.13'
    steps:
      - name: 🔒 Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit

      - name: 🧰 Checkout Repository
        uses: actions/checkout@v4 # v4.2.2
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Call Python Environment Setup
        uses: ./.github/actions/python-setup
        with:
          python-version: '3.12' #enforce new version
        id: python-setup

      - name: 🧰 Install Dependencies
        run: |
          hatch env create test

      - name: 🧪 Run Tests and Generate Coverage
        id: coverage
        run: |
          hatch test --python ${{ matrix.python-version }} --cover-quiet --randomize --parallel --retries 5 --retry-delay 3
          #set up variables to see the coverage
          COVERAGE=$(grep TOTAL .coverage | awk '{print $4}' | sed 's/%//') # Use XML for parsing
          echo "percentage=${COVERAGE}" >> "$GITHUB_OUTPUT"
          #fail if code coverage is below 80
          if [ "${COVERAGE}" -lt "80" ]; then
            echo "::warning::Coverage ${COVERAGE}% is below threshold of 80%"
            exit 1 # Fail the step if coverage is below 80%
          fi

      - name: 🔍 Disambiguate Coverage Filename
        run: mv .coverage ".coverage.${{ matrix.os }}.${{ matrix.python-version }}"

      - name: 📤 Upload Coverage Data
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.os }}-${{ matrix.python-version }}
          path: .coverage*

  release:
    name: Create Release
    needs: [test-and-build]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    environment: production
    permissions:
      contents: write
      id-token: write

    steps:
      - name: 🔒 Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit

      - name: 📥 Download Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

      - name: 📝 Create GitHub Release
        id: release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            dist/*
            LICENSE
            README.md
          generate_release_notes: true
          discussion_category_name: Releases
          body: |
              ## Release ${{ needs.test-and-build.outputs.version }}

              ### 📦 Assets
              - Package: https://pypi.org/project/${{ env.PACKAGE_NAME }}/${{ needs.test-and-build.outputs.version }}

              ### 📊 Quality Checks
              - ✅ Matrix Tests (Python 3.9-3.12)
              - ✅ Type Checking
              - ✅ Documentation Tests
              - ✅ Security Scans
              - ✅ Pre-commit Hooks
              - ✅ Visual Regression Tests

              ### 🔍 Verification
              SHA256 hashes are available in the asset details.

              ### 📚 Documentation
              - Documentation: https://${{ env.PACKAGE_NAME }}.readthedocs.io/
              - Changelog: https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md

      - name: 📢 Publish to PyPI
        uses: pypa/gh-action-pypi-publish@v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          verbose: true

  notify:
    name: Notifications
    needs: [release, test-and-build]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: 📧 Process Status
        uses: actions/github-script@v7
        with:
          script: |
            const { release, test_and_build } = context.needs;
            const version = test_and_build.outputs.version;

            if (release.result === 'success') {
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: context.issue.number,
                body: `✅ Version ${version} published successfully!\n\n` +
                       `📦 PyPI: https://pypi.org/project/${{ env.PACKAGE_NAME }}/${version}\n` +
                       `📚 Docs: https://${{ env.PACKAGE_NAME }}.readthedocs.io/\n` +
                       `📊 Coverage reports available in build artifacts`
              });
            } else if (release.result === 'failure') {
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: context.issue.number,
                body: `❌ Release failed for version ${version}.\n` +
                      `Please check: ${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`
              });
            }
