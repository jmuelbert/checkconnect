---
# SPDX-License-Identifier: EUPL-1.2
# SPDX-FileCopyrightText: 2025-present Jürgen Mülbert <juergen.muelbert@outlook.de>

name: 'CodeQL Security Analysis'

on: # yamllint disable-line rule:truthy
  push:
    branches: [main, develop]
    paths-ignore:
      - 'assets/'
      - 'docs/'
  pull_request:
    branches: [main, develop]
    paths-ignore:
      - 'assets/'
      - 'docs/'
  schedule:
    - cron: 17 16 * * 3
  workflow_dispatch:

permissions:
  actions: read
  contents: read
  security-events: write

env:
  PACKAGE_NAME: checkconnect
  PYTHON_VERSION_FILE: .python-version

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  analyze:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 60

    permissions:
      contents: write
      pull-requests: write
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ['python']

    steps:
      - name: 🔒 Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit

      - name: ⬇️ Checkout repository
        uses: actions/checkout@v4

      - name: Call Python Environment Setup
        uses: ./.github/actions/python-setup
        with:
          python-version: '3.x'
        id: python-setup

      # Initializes the CodeQL tools for scanning.
      - name: 'Initialize CodeQL'
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          # If you wish to specify custom queries, you can do so here or in a config file.
          # By default, queries listed here will override any specified in a config file.
          # Prefix the list here with "+" to use these queries and those in the config file.

          # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
          # queries: security-extended,security-and-quality

      - name: 'Perform CodeQL Analysis'
        uses: github/codeql-action/analyze@v3
        with:
          category: '${{ matrix.language }}-analyze'
          output: results/${{ matrix.language }}.sarif

      - name: 📊 Process Results
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            try {
              if (!fs.existsSync('results/python.sarif')) {
                console.log('No SARIF file found. Skipping results processing.');
                 return;
              }

              const sarif = JSON.parse(fs.readFileSync('results/python.sarif', 'utf8'));
              const results = sarif.runs[0].results || [];

              let summary = `## 🛡️ CodeQL Security Analysis Results\n\n`;

              if (results.length === 0) {
                summary += `✅ No security issues found!\n`;
              } else {
                const severity = {
                  error: 0,
                  warning: 0,
                  note: 0
                };

                results.forEach(result => {
                  severity[result.level || 'warning']++;
                });

                summary += `### Found Issues\n`;
                summary += `- 🔴 Errors: ${severity.error}\n`;
                summary += `- 🟡 Warnings: ${severity.warning}\n`;
                summary += `- 🔵 Notes: ${severity.note}\n\n`;

                if (severity.error > 0 || severity.warning > 0) {
                  summary += `### Recommendations\n`;
                  summary += `1. Review the detailed analysis in the Security tab\n`;
                  summary += `2. Follow the suggested fixes for each issue\n`;
                  summary += `3. Run CodeQL locally using the GitHub CLI\n`;
                }
              }

              // Add to PR if this is a pull request
              if (context.payload.pull_request) {
                await github.rest.issues.createComment({
                  ...context.repo,
                  issue_number: context.payload.pull_request.number,
                  body: summary
                  });
              }

              // Update PR labels
              if (context.payload.pull_request) {
                const labels = results.length === 0
                ? ['security-validated']
                : ['security-review-needed'];

                await github.rest.issues.addLabels({
                  ...context.repo,
                  issue_number: context.payload.pull_request.number,
                  labels: labels
                });
              }

            } catch (error) {
              console.error('Error processing CodeQL results:', error);
            }
