---
# SPDX-FileCopyrightText: Jürgen Mülbert
# SPDX-License-Identifier: EUPL-1.2

name: PR Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - develop
      - feature/**
      - bugfix/**

permissions:
  contents: read
  issues: write
  pull-requests: write

env:
  PYTHON_VERSION_FILE: .python-version
  PACKAGE_NAME: checkconnect

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate:
    name: Validate Dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 15

    permissions:
      contents: read
      pull-requests: write
      security-events: write

    steps:
      - name: 🔒 Harden Runner
        uses: step-security/harden-runner@v2.11.0 # Use tag instead of SHA
        with:
          egress-policy: audit

      - name: 📥 Checkout
        uses: actions/checkout@v4 # Use tag instead of SHA
        with:
          fetch-depth: 0

      - name: 🔎 Dependency Review
        id: review
        uses: actions/dependency-review-action@v4
        with:
          comment-summary-in-pr: always
          fail-on-severity: moderate
          retry-on-snapshot-warnings: true
          config-file: .github/dependency-review-config.yml

      - name: 📊 Generate Report
        if: always()
        env:
          DEPENDENCY_CHANGES: ${{ steps.review.outputs.dependency-changes }}
          VULNERABLE_CHANGES: ${{ steps.review.outputs.vulnerable-changes }}
          LICENSE_CHANGES: ${{ steps.review.outputs.invalid-license-changes }}
          DENIED_CHANGES: ${{ steps.review.outputs.denied-changes }}
        uses: actions/github-script@v7 # Use tag instead of SHA
        with:
          script: |
            const outputs = {
              dependencyChanges: JSON.parse(process.env.DEPENDENCY_CHANGES || '[]'),
              vulnerableChanges: JSON.parse(process.env.VULNERABLE_CHANGES || '[]'),
              licenseChanges: JSON.parse(process.env.LICENSE_CHANGES || '[]'),
              deniedChanges: JSON.parse(process.env.DENIED_CHANGES || '[]'),
            };

            let report = '## 📋 Dependency Review Report\n\n';

            // Dependency Summary
            report += `### 📑 Summary\n`;
            report += `- Total Changes: ${outputs.dependencyChanges.length}\n`;
            report += `- Vulnerable Changes: ${outputs.vulnerableChanges.length}\n`;
            report += `- License Issues: ${outputs.licenseChanges.length}\n`;
            report += `- Denied Changes: ${outputs.deniedChanges.length}\n\n`;

            // Vulnerabilities
            if (outputs.vulnerableChanges.length > 0) {
              report += '### ⚠️ Vulnerable Changes\n\n';
              outputs.vulnerableChanges.forEach(change => {
              report += `- **${change.package.name}@${change.package.version}**: ${change.advisory.title}\n`;
              report += `  - Severity: ${change.advisory.severity}\n`;
              report += `  - Advisory: [${change.advisory.url}](${change.advisory.url})\n\n`;
              });
            } else {
              report += '### ✅ No Vulnerable Changes Found\n\n';
            }

            // License Issues
            if (outputs.licenseChanges.length > 0) {
              report += '### 🚫 License Issues\n\n';
              outputs.licenseChanges.forEach(change => {
              report += `- **${change.package.name}@${change.package.version}**: ${change.license}\n`;
              report += `  - Allowed Licenses: ${change.allowedLicenses.join(', ')}\n\n`;
              });
            } else {
              report += '### ✅ No License Issues Found\n\n';
            }

            // Denied Changes
            if (outputs.deniedChanges.length > 0) {
              report += '### ❌ Denied Changes\n\n';
              outputs.deniedChanges.forEach(change => {
              report += `- **${change.package.name}@${change.package.version}**: ${change.reason}\n`;
              });
            } else {
              report += '### ✅ No Denied Changes Found\n\n';
            }

            // Post Report
            if (context.payload.pull_request) {
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: context.payload.pull_request.number,
                body: report
              });
            }


  validate-pr:
    name: Validate PR
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    outputs:
      title-valid: ${{ steps.check-title.outputs.valid }}
      body-valid: ${{ steps.check-body.outputs.valid }}

    permissions:
      issues: write
      pull-requests: write

    steps:
      - name: 🔒 Harden Runner
        uses: step-security/harden-runner@v2.11.0 # Use tag instead of SHA
        with:
          egress-policy: audit

      - name: 📥 Checkout
        uses: actions/checkout@v4 # Use tag instead of SHA
        with:
          fetch-depth: 0

      - name: 🔍 Check PR Title
        id: check-title
        uses: actions/github-script@v7 # Use tag instead of SHA
        with:
          script: |
            const { title } = context.payload.pull_request;
            const conventionalCommitRegex = /^(build|chore|ci|docs|feat|fix|perf|refactor|revert|style|test)\b(\([\w-]+\))?: .{1,100}$/;

            const isValid = conventionalCommitRegex.test(title);
            core.setOutput('valid', isValid);

            if (!isValid) {
              const validTypes = ['build', 'chore', 'ci', 'docs', 'feat', 'fix', 'perf', 'refactor', 'revert', 'style', 'test'];
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: context.issue.number,
                body: `## ❌ Invalid PR Title

                Please follow [Conventional Commits](https://www.conventionalcommits.org/) format:
                \`type(scope): description\`

                Valid types:
                ${validTypes.map(type => `- \`${type}\``).join('\n')}

                Examples:
                - \`feat(auth): add login functionality\`
                - \`fix(api): handle null response\`
                `
              });

  test:
    name: Python ${{ matrix.python-version }} on ${{ matrix.os }}
    needs: [validate, validate-pr]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.10', '3.11', '3.12', '3.13']
        exclude:
          - os: ubuntu-latest
            python-version: '3.13'

    outputs:
      coverage: ${{ steps.coverage.outputs.percentage }}

    steps:
      - name: 🔒 Harden Runner
        uses: step-security/harden-runner@v2.11.0 # Use tag instead of SHA
        with:
          egress-policy: audit

      - name: 🧰 Checkout Repository
        uses: actions/checkout@v4 # Use tag instead of SHA
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: ⚙️ Setup Python
        uses: actions/setup-python@v5 # Use tag instead of SHA
        with:
          python-version-file: ${{ env.PYTHON_VERSION_FILE }}
          cache: pip
          cache-dependency-path: pyproject.toml

      - name: 🧰 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install hatch
          hatch env create test

      - name: 🎨 Setup Qt Dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libxcb-xinerama0 \
            libxcb-icccm4 \
            libxcb-image0 \
            libxcb-keysyms1 \
            libxcb-randr0 \
            libxcb-render-util0 \
            libxcb-shape0 \
            libxcb-xkb1 \
            libxkbcommon-x11-0 \
            libegl1

      - name: 🧪 Run Tests
        run: hatch run test:test

      - name: 📊 Generate Coverage
        id: coverage
        run: |
          hatch run test:cov
          COVERAGE=$(grep TOTAL coverage.xml | awk '{print $4}' | sed 's/%//') # Use XML for parsing
          echo "percentage=${COVERAGE}" >> "$GITHUB_OUTPUT"

          if [ "${COVERAGE}" -lt "80" ]; then
            echo "::warning::Coverage ${COVERAGE}% is below threshold of 80%"
          fi

      - name: 📤 Upload Coverage
        uses: codecov/codecov-action@v4 # Use tag instead of SHA
        with:
          files: ./coverage.xml
          flags: ${{ matrix.os }},python-${{ matrix.python-version }}
          fail_ci_if_error: true

      - name: 📦 Store Test Results
        if: always()
        uses: actions/upload-artifact@v4 # Use tag instead of SHA
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            .coverage
            coverage.xml
            htmlcov/
          retention-days: 7

  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      issues: write
      pull-requests: write

    steps:
      - name: 🔒 Harden Runner
        uses: step-security/harden-runner@v2.11.0 # Use tag instead of SHA
        with:
          egress-policy: audit

      - name: 🧰 Checkout Repository
        uses: actions/checkout@v4 # Use tag instead of SHA

      - name: ⚙️ Setup Python
        uses: actions/setup-python@v5 # Use tag instead of SHA
        with:
          python-version-file: ${{ env.PYTHON_VERSION_FILE }}
          cache: pip
          cache-dependency-path: pyproject.toml

      - name: 🧰 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install hatch
          hatch env create lint

      - name: ✨ Run Pre-commit Checks
        run: hatch run lint:precommit

  spell-check:
    name: Spell Check
    runs-on: ubuntu-latest
    needs: quality-checks
    timeout-minutes: 15

    steps:
      - name: 🔒 Harden Runner
        uses: step-security/harden-runner@v2.11.0 # Use tag instead of SHA
        with:
          egress-policy: audit

      - name: 🧰 Checkout Repository
        uses: actions/checkout@v4 # Use tag instead of SHA

      - name: ⚙️ Setup Python
        uses: actions/setup-python@v5 # Use tag instead of SHA
        with:
          python-version-file: ${{ env.PYTHON_VERSION_FILE }}
          cache: pip
          cache-dependency-path: pyproject.toml

      - name: 🧰 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install hatch
          hatch env create lint

      - name: 🔍 Run Spell Checks
        id: spell-check
        run: |
          hatch run lint:spelling

      - name: 📝 Create Fix PR
        if: ${{ failure() }}
        uses: peter-evans/create-pull-request@v6 # Use tag instead of SHA
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'docs: fix spelling issues'
          title: '📝 Fix spelling issues'
          body: 'Automated PR to fix spelling errors detected by codespell.'
          branch: fix/spelling-${{ github.run_id }}
          delete-branch: true
          labels: |
            documentation
            automated-pr
            spelling

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: test

    steps:
      - name: 🔒 Harden Runner
        uses: step-security/harden-runner@v2.11.0 # Use tag instead of SHA
        with:
          egress-policy: audit

      - name: 🧰 Checkout Repository
        uses: actions/checkout@v4 # Use tag instead of SHA

      - name: ⚙️ Setup Python
        uses: actions/setup-python@v5 # Use tag instead of SHA
        with:
          python-version-file: ${{ env.PYTHON_VERSION_FILE }}
          cache: pip
          cache-dependency-path: pyproject.toml

      - name: 🧰 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install hatch
          hatch env create docs

      - name: 📚 Build Docs
        id: build
        run: hatch run docs:build

      - name: 🔍 Check Links
        run: hatch run docs:validate-links

      - name: 🔍 Quality Check
        run: python docs/scripts/doc_quality.py
        continue-on-error: true

      - name: 📊 Translation Status
        id: translations
        run: |
          missing_translations=$(find docs/i18n -type f -name "*.md" | wc -l)
          total_docs=$(find docs/en -type f -name "*.md" | wc -l)
          echo "translation_coverage=$((missing_translations * 100 / total_docs))" >> "$GITHUB_OUTPUT"

  report:
    name: Generate Report
    if: always()
    needs: [validate, validate-pr, test, quality-checks, spell-check, docs]
    runs-on: ubuntu-latest

    steps:
      - name: 📊 Process Results
        uses: actions/github-script@v7 # Use tag instead of SHA
        with:
          script: |
            const summary = `## 🔍 PR Check Results

            ### Test Coverage: ${process.env.TEST_COVERAGE}%
            - Validate: ${process.env.VALIDATE_RESULT}
            - Validate-PR: ${process.env.VALIDATE_PR_RESULT}
            - Test: ${process.env.TEST_RESULT}
            - Quality-Checks: ${process.env.QUALITY_CHECKS_RESULT}
            - Spell-Check: ${process.env.SPELL_CHECK_RESULT}
            - Docs: ${process.env.DOCS_RESULT}

            ### Details
            - [Coverage Report](https://codecov.io/gh/${process.env.REPOSITORY})
            - [Test Results](${process.env.GITHUB_SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})
            `;

            if (context.payload.pull_request) {
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: context.payload.pull_request.number,
                body: summary
              });
            }
        env:
          TEST_COVERAGE: ${{ needs.test.outputs.coverage }}
          VALIDATE_RESULT: ${{ needs.validate.result }}
          VALIDATE_PR_RESULT: ${{ needs.validate-pr.result }}
          TEST_RESULT: ${{ needs.test.result }}
          QUALITY_CHECKS_RESULT: ${{ needs.quality-checks.result }}
          SPELL_CHECK_RESULT: ${{ needs.spell-check.result }}
          DOCS_RESULT: ${{ needs.docs.result }}
          REPOSITORY: ${{ github.repository }}
          GITHUB_SERVER_URL: ${{ github.server_url }}
          GITHUB_RUN_ID: ${{ github.run_id }}

      - name: 🚨 Check Status
        if: needs.test.result != 'success' || needs.quality-checks.result != 'success' || needs.docs.result != 'success' || needs.spell-check.result != 'success'
        run: exit 1
