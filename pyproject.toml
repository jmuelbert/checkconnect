# SPDX-License-Identifier: EUPL-1.2
# SPDX-FileCopyrightText: 2023-present J端rgen M端lbert <juergen.muelbert@outlook.de>
#
[build-system]
requires = ["hatchling>=1.18.0"]
build-backend = "hatchling.build"

[project]
name = "checkconnect"
dynamic = ["version"]
description = "Checks the availability of web addresses and NTP servers."
readme = "README.md"
requires-python = ">=3.10"
license = "EUPL-1.2"
authors = [{ name = "J端rgen M端lbert", email = "juergen.muelbert@outlook.de" }]
# Pypi classifiers: https://pypi.org/classifiers/
classifiers = [
  "Development Status :: 2 - Pre-Alpha",
  "Environment :: Console",
  "Intended Audience :: Developers",
  "Intended Audience :: Information Technology",
  "License :: OSI Approved :: European Union Public Licence 1.2 (EUPL 1.2)",
  "Operating System :: MacOS",
  "Operating System :: Microsoft :: Windows",
  "Operating System :: OS Independent",
  "Operating System :: POSIX",
  "Operating System :: Unix",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
  "Topic :: Internet",
  "Topic :: Internet :: WWW/HTTP",
  "Topic :: Software Development :: Testing",
  "Topic :: System :: Monitoring",
  "Topic :: Desktop Environment",
  "Topic :: Software Development :: User Interfaces"
]
# Keywords description: https://python-poetry.org/docs/pyproject/#keywords
keywords = [
  "checkconnect",
  "network monitoring",
  "website monitoring",
  "network tools",
  "python-tool"
]

dependencies = [
  "click>=8.0,<9.0.0",
  "requests>=2.32.3,<3.0.0",
  "ntplib>=0.4.0,<0.5.0",
  "weasyprint>=64.1,<65.0",
  "PySide6>=6.8,<6.9.0"
]





[project.urls]
Homepage = "https://github.com/jmuelbert/checkconnect"
Documentation = "https://jmuelbert.github.io/checkconnect/"
Repository = "https://github.com/jmuelbert/checkconnect.git"
Issues = "https://github.com/jmuelbert/checkconnect/issues"
Changelog = "https://github.com/jmuelbert/checkconnect/blob/main/CHANGELOG.md"
Source = "https://github.com/jmuelbert/checkconnect"

[tool.hatch.entry_points."console_scripts"]
checkconnect = "checkconnect.__main__:main"
checkconnect_gui = "checkconnect.__main__:main --gui"

[tool.hatch.version]
path = "src/checkconnect/__about__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/checkconnect"]
macos-max-compat = true


[[tool.hatch.envs.test.matrix]]
python = ["3.10", "3.11", "3.12", "3.13"]

[tool.hatch.envs.test]
dependencies = [
  "coverage>=6.2",
  "pytest>=7.4.0",
  "pytest-mock>=3.14.0",
  "pytest-qt>=4.4.0",
  "pytest-cov>=4.1.0",
  "pytest-timeout>=2.3.1",
  "pytest-randomly>=3.15.0",
  "fastapi>=0.115.8",
  "httpx>=0.28.1",
  "typeguard>=4.1.5",
  "xdoctest>=0.15.10",
]

[tool.hatch.envs.test.scripts]
test = "pytest tests/ {args}"
cov = "pytest --cov-report=xml --cov-report=html --cov-report=term-missing --cov=src tests/"
typeguard = "pytest --typeguard-packages=src"
doctest = "pytest --doctest-modules"

[tool.hatch.envs.lint]
dependencies = [
  "pre-commit>=3.6.0",
  "ruff>=0.9",
  "black>=24.2.0",
  "mypy>=1.8.0",
  "pylint>=3.0.0",
  "pylint-pytest>=1.1.2",
  "codespell>=2.3.0",
  "reuse>=5.0.2",
  "radon[toml]>=6.0.1",
]

[tool.hatch.envs.lint.scripts]
# Combined style linting
style = ["ruff check .", "ruff format .", "black --check ."]

# PySide6 specific lint
pyside6-lint = "pyside6-qmllint src/checkconnect/qml/**"

# Type checking
typing = "mypy src tests --strict --warn-unused-configs"

# Linting
lint = "pylint src tests"

# Spelling check
spelling = "codespell -w ."

# License compliance
license = "reuse lint"

# Pre-commit checks
precommit = "pre-commit run --all-files"

# Code quality metrics
radon_quality = ["radon cc ./src -a -nb", "radon mi ./src -nb"]

# Aggregate linting tasks
all = ["style", "typing", "lint", "spelling", "license", "radon_quality"]

[tool.hatch.envs.security]
dependencies = ["bandit[toml]>=1.7.8" ]

[tool.hatch.envs.security.scripts]

# Run Bandit for static security analysis
bandit-scan = "bandit -r src -ll"

# Aggregate security tasks
all = ["bandit-scan"]

[tool.hatch.envs.docs]
dependencies = [
  "mkdocs>=1.6.1,<1.7",
  "mkdocs-material[imaging]>=9.6.7,<9.7",
  "mkdocs-static-i18n>=1.3.0,<1.4",
  "mkdocs-awesome-pages-plugin>=2.10.1,<2.20",
  "mkdocs-click>=0.8.1,<0.9",
  "mkdocs-minify-plugin>=0.8.0,<0.9",
  "mkdocs-mermaid2-plugin>=1.2.0,<1.3",
  "mkdocs-git-revision-date-localized-plugin>=1.3.0,<1.4",
  "mkdocs-glightbox>=0.4.0,<0.5",
  "mkdocs-linkcheck>=1.0.6,<1.1",
  "mike>=2.1.3,<2.2",
  "mkdocstrings-python>=1.16.2,<1.17.0",
  "pymdown-extensions>=10.14,<10.15",
  "griffe>=1.6.0,<1.7.0",
  "pyaml>=25.1.0",
  "rich>=13.9.4"
]

[tool.hatch.envs.docs.scripts]
build = "mkdocs build --clean --strict"
validate-links = "mkdocs linkcheck"
serve = "mkdocs serve --dev-addr localhost:8000"
deploy = "mkdocs gh-deploy --force"
qualitycheck = "python scripts/doc_quality.py"

[tool.hatch.envs.translate]
dependencies = [
    "pyaml>=25.1.0",
    "rich>=13.9.4",
    "babel>=2.17.0",
    "PySide6>=6.8,<6.9.0"
]

[tool.hatch.envs.translate.scripts]
all = "python scripts/update_translations.py"
qt = "python scripts/update_translations.py --qt-only"
python = "python scripts/update_translations.py --babel-only"

[tool.coverage.run]
branch = true
parallel = true
source_pkgs = ["checkconnect", "tests"]
omit = ["src/checkconnect/__about__.py"]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug:",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
  "pass",
  "raise ImportError",
]
fail_under = 90
show_missing = true

[tool.ruff]
fix = true
line-length = 88
unfixable = ["F401", "F841"] # Don't auto-remove unused imports

[tool.ruff.format]
docstring-code-line-length = 100

[tool.ruff.lint]
select = ["ALL"]
ignore = [
  "B027",   # Allow non-abstract empty methods in abstract base classes.
  "D203",
  "D212",
  "S101",   # Allow `assert` usage for testing.
  "SIM105", # Suppress complex contextlib suggestions.
  "RET503", # Missing explicit return at the end of functions.
  "RET504", # Unnecessary assignments after return.
  "RET505", # Unnecessary else after return.
  "RET506", # Unnecessary elif after raise.
  "S105",
  "S106",   # Ignore password warnings.
  "RUF012", # Ignore mutable class attribute annotations.
  "UP007",  # Suppress type annotation updates for older versions.
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["S101", "FBT", "INP001", "D", "S603", "PLR2004"]
"*.py" = ["Q000"]  # Example: Ignore specific PyQt warnings

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.bandit]
exclude_dirs = ["tests", "scripts"]
targets = ["src"]
skips = ["B101"]

[tool.bandit.assert_used]
skips = ["*_test.py", "*/test_*.py"]

[tool.gitleaks]
enable-rules = ["generic-api-key", "python-password", "pyside-secret"]
allow-paths = ["assets/translations/**", "LICENSES/**", "tests/**"]

[tool.black]
target-version = ['py311']
line-length = 88
include = '\.pyi?$'
extend-exclude = '''
# A regex preceded with ^/ will apply only to files and directories
# in the root of the project.
^/tests/data/
'''

[tool.markdownlint]
MD013 = false # Line length
MD033 = false # Inline HTML
MD041 = false # First line in file should be a top level

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra", "--strict-markers", "--strict-config", "--doctest-modules"]
testpaths = ["tests"]
filterwarnings = ["error"]

[tool.pydocstyle]
convention = "google" # or "numpy" or "pep257"
add-ignore = ["D100"] # Example to ignore missing docstrings on functions

[tool.yamllint]
extends = "default"
strict = true
ignore = [".github/workflows/", "LICENSES/", "assets/translations/"]

[tool.yamllint.rules]
document-start = "enable"
line-length = { max = 100, allow-non-breakable-inline-mappings = true }
quoted-strings = { quote-type = "double", required = false }
truthy = { allowed-values = ["true", "false"] }

[tool.pylint]
max-line-length = 88
disable = [
  "C0111", # missing-docstring
  "R0903", # too-few-public-methods
]
good-names = ["i", "j", "k", "ex", "Run", "_"]
max-args = 5
max-attributes = 7
max-bool-expr = 5
max-branches = 12
max-locals = 15
max-parents = 7
max-public-methods = 20
max-returns = 6
max-statements = 50
min-public-methods = 2

[tool.codespell]
skip = """
    .git,
    .venv,
    *.png,
    *.gif,
    *.jpg,
    *.svg,
    *.ui,
    *.qrc,
    *.ts,
    LICENSE,
    LICENSES/*,
    dist/*,
    build/*,
    __pycache__/*,
    *.pyc
"""
ignore-words-list = """
    checkconnect,pyside,pytest,pyqt,qtodotxt,
    args,kwargs,repr,str,int,bool,dict,lst,idx,
    varchar,uuid,datetime,
    qml,qmake,qrc,uic,rcc,
    conf,config,dev,docs,env,lib,pkg,src,tmp,utils,
    qabstractitemmodel,qaction,qapplication,qcombobox,
    qdialog,qicon,qlabel,qlayout,qlineedit,qmainwindow,
    qmenu,qmenubar,qmessagebox,qobject,qpushbutton,
    qspinbox,qstandarditem,qstandarditemmodel,qstatusbar,
    qtableview,qtoolbar,qwidget,shiboken
"""
check-filenames = true
check-hidden = false
quiet-level = 3
count = true

[tool.proselint]
max-line-length = 100
checks = [
  "typography.diacritical_marks",
  "typography.exclamation",
  "typography.quotes",
  "misc.annotations",
  "misc.link_review",
  "security.password",
  "spelling.able_atable",
  "spelling.able_ible",
  "spelling.athletes",
  "spelling.em_im_en_in",
  "spelling.er_or",
  "spelling.in_un",
  "spelling.misc",
  "consistency.spacing",
  "consistency.spelling",
]

[tool.xdoctest]
style = "google"
